From e235241893cf09fbce5fb2f339841dd27ca0dfde Mon Sep 17 00:00:00 2001
From: Pallavi Jha <pallavikumarijha@gmail.com>
Date: Wed, 8 Jan 2014 12:41:08 +0545
Subject: [PATCH] cmocka unit test for authtok module added

---
 Makefile.am                     |  15 ++
 src/tests/cmocka/test_authtok.c | 304 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 319 insertions(+)
 create mode 100644 src/tests/cmocka/test_authtok.c

diff --git a/Makefile.am b/Makefile.am
index 4015dadd78e26ec285b7010c3e39b22458fa878b..2733d4f6dd3a5090026d248fb7329fc4b3da93dc 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -149,6 +149,7 @@ if HAVE_CMOCKA
         nss-srv-tests \
         test-find-uid \
         test-io \
+        test-authtok \
         sss_nss_idmap-tests \
         dyndns-tests \
         fqnames-tests \
@@ -1332,6 +1333,20 @@ test_io_CFLAGS = \
 test_io_LDADD = \
     $(CMOCKA_LIBS)
 
+test_authtok_SOURCES = \
+    src/tests/cmocka/test_authtok.c \
+    src/util/authtok.c \
+    src/util/util.c
+test_authtok_CFLAGS = \
+    $(AM_CFLAGS) \
+    $(TALLOC_CFLAGS) \
+    $(DHASH_CFLAGS)
+test_authtok_LDADD = \
+    $(TALLOC_LIBS) \
+    $(CMOCKA_LIBS) \
+    $(DHASH_LIBS) \
+    libsss_debug.la
+
 sss_nss_idmap_tests_SOURCES = \
     src/tests/cmocka/sss_nss_idmap-tests.c
 sss_nss_idmap_tests_CFLAGS = \
diff --git a/src/tests/cmocka/test_authtok.c b/src/tests/cmocka/test_authtok.c
new file mode 100644
index 0000000000000000000000000000000000000000..f261d2500bc1c7a058a25d4d05259d1cc6a4a095
--- /dev/null
+++ b/src/tests/cmocka/test_authtok.c
@@ -0,0 +1,304 @@
+/*
+    SSSD
+
+    authtok - Utilities tests
+    
+    Authors:
+        Pallavi Jha <pallavikumarijha@gmail.com>
+
+    Copyright (C) 2013 Red Hat
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include <stdarg.h>
+#include <stddef.h>
+#include <setjmp.h>
+#include <cmocka.h>
+#include <string.h>
+
+#include "util/authtok.h"
+
+
+struct test_state {
+    struct sss_auth_token *authtoken;
+};
+
+static void setup(void **state)
+{
+    struct test_state *ts = NULL;
+
+    ts = talloc(NULL, struct test_state);
+    assert_non_null(ts);
+
+    ts->authtoken = sss_authtok_new(ts);
+    assert_non_null(ts->authtoken);
+
+    *state = (void *)ts;
+}
+
+static void teardown(void **state)
+{
+    struct test_state *ts = talloc_get_type_abort(*state, struct test_state);
+    talloc_free(ts);
+}
+
+static void test_sss_authtok_new(void **state)
+{
+    struct test_state *ts = talloc_get_type_abort(*state, struct test_state);
+    struct sss_auth_token *authtoken;
+
+    authtoken = sss_authtok_new(ts);
+    assert_non_null(authtoken);
+
+    talloc_free(authtoken);
+}
+
+/* @test_authtok_type_x : tests following functions for different value of type
+ * sss_authtok_set
+ * sss_authtok_get_type
+ * sss_authtok_get_size
+ * sss_authtok_get_data
+ * sss_authtok_get_password
+ * sss_authtok_get_ccfile
+ *
+ * @test_authtok_type_password : type => SSS_AUTHTOK_TYPE_PASSWORD
+ * @test_authtok_type_ccfile   : type => SSS_AUTHTOK_TYPE_CCFILE
+ * @test_authtok_type_empty    : type => SSS_AUTHTOK_TYPE_EMPTY
+ */
+
+/* Test when type has value SSS_AUTHTOK_TYPE_PASSWORD */
+static void test_sss_authtok_password(void **state)
+{
+    size_t len;
+    errno_t ret;
+    const char *data;
+    size_t ret_len;
+    const char *pwd;
+    struct test_state *ts;
+    enum sss_authtok_type type;
+
+    ts = talloc_get_type_abort(*state, struct test_state);
+    data = talloc_strdup(ts, "password");
+    assert_non_null(data);
+
+    len = strlen(data) + 1;
+    type = SSS_AUTHTOK_TYPE_PASSWORD;
+    ret = sss_authtok_set(ts->authtoken, type, (uint8_t *)data, len);
+
+    assert_int_equal(ret, EOK);
+    assert_int_equal(type, sss_authtok_get_type(ts->authtoken));
+    assert_int_equal(len, sss_authtok_get_size(ts->authtoken));
+    assert_string_equal(data, sss_authtok_get_data(ts->authtoken));
+
+    ret = sss_authtok_get_password(ts->authtoken, &pwd, &ret_len);
+
+    assert_int_equal(ret, EOK);
+    assert_string_equal(data, pwd);
+    assert_int_equal(len - 1, ret_len);
+
+    ret = sss_authtok_set_password(ts->authtoken, data, len);
+
+    assert_int_equal(ret, EOK);
+    ret = sss_authtok_get_password(ts->authtoken, &pwd, &ret_len);
+    assert_int_equal(ret, EOK);
+    assert_string_equal(data, pwd);
+    assert_int_equal(len - 1, ret_len);
+}
+
+/* Test when type has value SSS_AUTHTOK_TYPE_CCFILE */
+static void test_sss_authtok_ccfile(void **state)
+{
+    size_t len;
+    errno_t ret;
+    const char *data;
+    size_t ret_len;
+    const char *pwd;
+    struct test_state *ts;
+    enum sss_authtok_type type;
+ 
+    ts = talloc_get_type_abort(*state, struct test_state);
+    data = talloc_strdup(ts, "path/to/cc_file");
+    assert_non_null(data);
+
+    len = strlen(data) + 1;
+    type = SSS_AUTHTOK_TYPE_CCFILE;
+    ret = sss_authtok_set(ts->authtoken, type, (uint8_t *)data, len);
+
+    assert_int_equal(ret, EOK);
+    assert_int_equal(type, sss_authtok_get_type(ts->authtoken));
+    assert_int_equal(len, sss_authtok_get_size(ts->authtoken));
+    assert_string_equal(data, sss_authtok_get_data(ts->authtoken));
+
+    ret = sss_authtok_get_ccfile(ts->authtoken, &pwd, &ret_len);
+
+    assert_int_equal(ret, EOK);
+    assert_string_equal(data, pwd);
+    assert_int_equal(len - 1, ret_len);
+
+    ret = sss_authtok_set_ccfile(ts->authtoken, data, len);
+
+    assert_int_equal(ret, EOK);
+ 
+    ret = sss_authtok_get_ccfile(ts->authtoken, &pwd, &ret_len);
+
+    assert_int_equal(ret, EOK);
+    assert_string_equal(data, pwd);
+    assert_int_equal(len - 1, ret_len);
+
+
+    ret = sss_authtok_set(ts->authtoken, type, (uint8_t *) data, 0);
+ 
+    assert_int_equal(ret, EOK);
+    assert_int_equal(type, sss_authtok_get_type(ts->authtoken));
+    assert_int_equal(len, sss_authtok_get_size(ts->authtoken));
+    assert_string_equal(data, sss_authtok_get_data(ts->authtoken));
+
+    ret = sss_authtok_get_ccfile(ts->authtoken, &pwd, &ret_len);
+
+    assert_int_equal(ret, EOK);
+    assert_string_equal(data, pwd);
+    assert_int_equal(len - 1, ret_len);
+}
+
+/* Test when type has value SSS_AUTHTOK_TYPE_EMPTY */
+static void test_sss_authtok_empty(void **state)
+{
+    errno_t ret;
+    size_t ret_len;
+    const char *pwd;
+    struct test_state *ts;
+    enum sss_authtok_type type;
+ 
+    type = SSS_AUTHTOK_TYPE_EMPTY;
+    ts = talloc_get_type_abort(*state, struct test_state);
+    ret = sss_authtok_set(ts->authtoken, type, NULL, 0);
+
+    assert_int_equal(ret, EOK);
+    assert_int_equal(type, sss_authtok_get_type(ts->authtoken));
+    assert_int_equal(0, sss_authtok_get_size(ts->authtoken));
+    assert_null(sss_authtok_get_data(ts->authtoken));
+ 
+    ret = sss_authtok_get_password(ts->authtoken, &pwd, &ret_len);
+
+    assert_int_equal(ret, ENOENT);
+
+    ret = sss_authtok_get_ccfile(ts->authtoken, &pwd, &ret_len);
+
+    assert_int_equal(ret, ENOENT);
+
+    sss_authtok_set_empty(ts->authtoken);
+ 
+    assert_int_equal(type, sss_authtok_get_type(ts->authtoken));
+    assert_int_equal(0, sss_authtok_get_size(ts->authtoken));
+    assert_null(sss_authtok_get_data(ts->authtoken));
+ 
+    ret = sss_authtok_set(ts->authtoken, type, '\0', 0);
+    assert_int_equal(ret, EOK);
+
+    assert_int_equal(type, sss_authtok_get_type(ts->authtoken));
+    assert_int_equal(EOK, sss_authtok_get_size(ts->authtoken));
+    assert_null(sss_authtok_get_data(ts->authtoken));
+ 
+    ret = sss_authtok_get_password(ts->authtoken, &pwd, &ret_len);
+
+    assert_int_equal(ret, ENOENT);
+
+    ret = sss_authtok_get_ccfile(ts->authtoken, &pwd, &ret_len);
+
+    assert_int_equal(ret, ENOENT);
+}
+
+static void test_sss_authtok_wipe_password(void **state)
+{
+    size_t len;
+    errno_t ret;
+    const char *data;
+    size_t ret_len;
+    const char *pwd;
+    struct test_state *ts;
+    enum sss_authtok_type type;
+ 
+    ts = talloc_get_type_abort(*state, struct test_state);
+    data = talloc_strdup(ts, "password");
+    assert_non_null(data);
+
+    len = strlen(data) + 1;
+    type = SSS_AUTHTOK_TYPE_PASSWORD;
+    ret = sss_authtok_set(ts->authtoken, type, (uint8_t *)data, len);
+
+    assert_int_equal(ret, EOK);
+
+    sss_authtok_wipe_password(ts->authtoken);
+
+    ret = sss_authtok_get_password(ts->authtoken, &pwd, &ret_len);
+ 
+    assert_int_equal(ret, EOK);
+    assert_string_equal(pwd, "");
+    assert_int_equal(len - 1, ret_len);
+}
+
+static void test_sss_authtok_copy(void **state)
+{
+    size_t len;
+    errno_t ret;
+    const char *data;
+    struct test_state *ts;
+    enum sss_authtok_type type;
+    struct sss_auth_token *dest_authtoken;
+ 
+    ts= talloc_get_type_abort(*state, struct test_state);
+ 
+    dest_authtoken = sss_authtok_new(ts);
+    assert_non_null(dest_authtoken);
+
+    data = talloc_strdup(ts, "password");
+    assert_non_null(data);
+
+    len = strlen(data) + 1;
+    type = SSS_AUTHTOK_TYPE_EMPTY;
+    ret = sss_authtok_set(ts->authtoken, type, (uint8_t *)data, len);
+
+    assert_int_equal(ret, EOK);
+    assert_int_equal(EOK, sss_authtok_copy(ts->authtoken, dest_authtoken));
+    assert_int_equal(type, sss_authtok_get_type(dest_authtoken));
+
+    type = SSS_AUTHTOK_TYPE_PASSWORD;
+    ret = sss_authtok_set(ts->authtoken, type, (uint8_t *)data, len);
+
+    assert_int_equal(ret, EOK);
+
+    ret = sss_authtok_copy(ts->authtoken, dest_authtoken);
+
+    assert_int_equal(ret, EOK);
+    assert_int_equal(type, sss_authtok_get_type(dest_authtoken));
+    assert_string_equal(data, sss_authtok_get_data(dest_authtoken));
+    assert_int_equal(len, sss_authtok_get_size(dest_authtoken));
+}
+
+int main(void)
+{
+    const UnitTest tests[] = {
+        unit_test_setup_teardown(test_sss_authtok_new, setup, teardown),
+        unit_test_setup_teardown(test_sss_authtok_password, setup, teardown),
+        unit_test_setup_teardown(test_sss_authtok_ccfile, setup, teardown),
+        unit_test_setup_teardown(test_sss_authtok_empty, setup, teardown),
+        unit_test_setup_teardown(test_sss_authtok_wipe_password, setup,
+                                 teardown),
+        unit_test_setup_teardown(test_sss_authtok_copy, setup, teardown)
+    };
+
+    return run_tests(tests);
+}
+
-- 
1.8.3.1

